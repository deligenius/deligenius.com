{"componentChunkName":"component---src-pages-docs-jsx","path":"/docs/parsing-body","result":{"data":{"mdx":{"id":"8eb01d24-9ed8-5a70-b60d-c9826b57e5c8","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Parsing Body\",\n  \"route\": \"/docs/parsing-body\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"Use BodyParser\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Deligenius has a separate middleware module: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bodyParser\"), \",\\nwhich can be used to parse \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"parameter\"), \", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"query\"), \", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"json\"), \" etc,.\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mid\"), \" is a shortcut of \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/deligenius/bodyparser\"\n  }), \"bodyParser\"), \"\\nwhich includes many pre-configured middlewares for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"deligenius\"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import { mid } from \\\"https://raw.githubusercontent.com/deligenius/bodyparser/master/mod.ts\\\"\\n\")), mdx(\"h4\", null, \"Get \", mdx(\"inlineCode\", {\n    parentName: \"h4\"\n  }, \"query\"), \" parameter\"), mdx(\"p\", null, \"We will first start a complete example,\\nthen you can better understand the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mid\"), \" method with more parser middlewares.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import {\\n  Application,\\n  Router,\\n} from \\\"https://raw.githubusercontent.com/deligenius/deligenius/master/mod.ts\\\"\\nimport { mid } from \\\"https://raw.githubusercontent.com/deligenius/bodyparser/master/mod.ts\\\"\\n\\nlet app = new Application({ port: 8000 }).listen()\\n\\napp.use(mid.query(), ctx => {\\n  let query = ctx.req.query\\n  ctx.send(query)\\n})\\n\")), mdx(\"h4\", null, \"Get \", mdx(\"inlineCode\", {\n    parentName: \"h4\"\n  }, \"json\"), \" data\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"app.use(mid.json(), ctx => {\\n  let json = ctx.req.json\\n  ctx.send(json)\\n})\\n\")), mdx(\"h4\", null, \"Get \", mdx(\"inlineCode\", {\n    parentName: \"h4\"\n  }, \"params\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"app.use(mid.params(\\\"/:name/:age\\\"), ctx => {\\n  let params = ctx.req.params\\n  ctx.send(params)\\n})\\n\")), mdx(\"h4\", null, \"Get \", mdx(\"inlineCode\", {\n    parentName: \"h4\"\n  }, \"multipart/form-data\")), mdx(\"p\", null, \"Dealing with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"multipart/form-data\"), \" can be very complicated,\\nbut fortunately Deligenius has an official \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/deligenius/multiparser\"\n  }), \"Multiparser\"), \"\\nto handle this kind of data.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import { multiParser } from 'https://raw.githubusercontent.com/deligenius/multiparser/master/mod.ts'\\n\\napp.use(async(ctx) => {\\n  const form = await multiParser(ctx.request)\\n  ctx.send(form)\\n})\\n\")), mdx(\"h4\", null, \"Get \", mdx(\"inlineCode\", {\n    parentName: \"h4\"\n  }, \"urlencoded\"), \" form data\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"app.use(mid.urlencoded(), ctx => {\\n  let urlencoded = ctx.req.urlencoded\\n  ctx.send(urlencoded)\\n})\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Parsing Body","route":"/docs/parsing-body"}}},"pageContext":{"id":"8eb01d24-9ed8-5a70-b60d-c9826b57e5c8","slug":"/docs/parsing-body"}}}
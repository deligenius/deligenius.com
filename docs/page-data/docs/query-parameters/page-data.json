{"componentChunkName":"component---src-pages-docs-jsx","path":"/docs/query-parameters","result":{"data":{"mdx":{"id":"89fa608b-ae52-573a-80a6-b530acb16f1e","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Query and Parameters\",\n  \"route\": \"/docs/query-parameters\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"Query and Parameters\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Deligenius has an official middleware module: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bodyParser\"), \",\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mid\"), \" is a shortcut of \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/deligenius/bodyparser\"\n  }), \"bodyParser\"), \"\\nWe use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mid\"), \" to extract \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"query\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"params\"), \" from url, please make sure you have \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mid\"), \" import\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import { mid } from \\\"https://raw.githubusercontent.com/deligenius/bodyparser/master/mod.ts\\\"\\n\")), mdx(\"h4\", null, \"Get \", mdx(\"inlineCode\", {\n    parentName: \"h4\"\n  }, \"query\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"A query string is part of URL. \")), mdx(\"p\", null, \"Suppose you have a request: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"https://example.com/q?name=ferret&color=green\"), \",\\nquery string is the part after \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"?\"), \" mark, which is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"name=ferret&color=green\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"app.use(mid.query(), ctx => {\\n  let query = ctx.req.query\\n  ctx.send(query)\\n})\\n\")), mdx(\"p\", null, \"By using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mid.query()\"), \", it parses the url then generate a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"object\"), \" at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ctx.req.query\"), \".\"), mdx(\"p\", null, \"For the example above, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ctx.req.query = {name: \\\"ferret\\\", color: \\\"green\\\"}\")), mdx(\"h4\", null, \"Get \", mdx(\"inlineCode\", {\n    parentName: \"h4\"\n  }, \"params\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Route parameters is a custom utility to capture named segment from url.\")), mdx(\"p\", null, \"Suppose you have request: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"https://example.com/john/29\"), \", and you want to extract\\nthe part \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"name=john\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"age=29\"), \". \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mid.params(\\\"/:name/:age\\\")\"), \" will help you to do the job\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"app.use(mid.params(\\\"/:name/:age\\\"), ctx => {\\n  let params = ctx.req.params\\n  ctx.send(params)\\n})\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mid.params()\"), \" handles parameters very well and populate a object at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ctx.req.params\"), \".\\nFor the example above, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ctx.req.params = {name: \\\"john\\\", age: \\\"29\\\"}\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Query and Parameters","route":"/docs/query-parameters"}}},"pageContext":{"id":"89fa608b-ae52-573a-80a6-b530acb16f1e","slug":"/docs/query-parameters"}}}
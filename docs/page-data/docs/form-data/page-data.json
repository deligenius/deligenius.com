{"componentChunkName":"component---src-pages-docs-jsx","path":"/docs/form-data","result":{"data":{"mdx":{"id":"3873c9ce-923c-543b-b74f-224d0e98a505","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Form Data\",\n  \"route\": \"/docs/form-data\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"Form Data\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Deligenius has an official middleware module: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bodyParser\"), \",\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mid\"), \" is a shortcut of \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/deligenius/bodyparser\"\n  }), \"bodyParser\"), \"\\nPlease make sure you have \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mid\"), \" import\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import { mid } from \\\"https://raw.githubusercontent.com/deligenius/bodyparser/master/mod.ts\\\"\\n\")), mdx(\"h4\", null, \"Get \", mdx(\"inlineCode\", {\n    parentName: \"h4\"\n  }, \"urlencoded\"), \" form data\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"urlencoded form has a content-type of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"application/x-www-form-urlencoded\"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"app.use(mid.urlencoded(), ctx => {\\n  let urlencoded = ctx.req.urlencoded\\n  ctx.send(urlencoded)\\n})\\n\")), mdx(\"h4\", null, \"Get \", mdx(\"inlineCode\", {\n    parentName: \"h4\"\n  }, \"multipart/form-data\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"multipart form has a content-typef of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"multipart/form-data; boundary=...\"))), mdx(\"p\", null, \"Dealing with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"multipart/form-data\"), \" can be very complicated,\\nbut fortunately Deligenius has an official \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/deligenius/multiparser\"\n  }), \"Multiparser\"), \"\\nto handle this kind of data.\"), mdx(\"p\", null, \"In below code, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"await multiParser(ctx.req)\"), \" return a data with type of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"string | FormFile | FormFile[]\"), \".\"), mdx(\"p\", null, \"Corresponding to upload file type of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"string\"), \", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"single file\"), \" or \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"multiple files\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"interface FormFile {\\n  /** filename  */\\n  filename: string\\n  /** content-type header value of file */\\n  type: string\\n  /** byte size of file */\\n  size: number\\n  /** in-memory content of file. Either content or tempfile is set  */\\n  content?: Uint8Array\\n}\\n\")), mdx(\"p\", null, \"Thus, in each \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FormFile\"), \" we can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Deno.writeFile(path:string, content: Uint8Array)\"), \" to write \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FormFile.content\"), \" into local disk.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import { Application } from \\\"https://deno.land/x/deligenius/mod.ts\\\"\\nimport { multiParser } from \\\"../mod.ts\\\"\\n\\nlet app = new Application({ port: 8000 }).listen()\\n\\napp.use(async ctx => {\\n  if (ctx.req.url === \\\"/upload\\\") {\\n    const form = await multiParser(ctx.req)\\n\\n    // form.multiple is array of FormFile\\n    if (form.multiple instanceof Array) {\\n      Deno.writeFile(\\\"myMultipleFile.txt\\\", form.multiple[0].content)\\n    }\\n    // form.multiple is string\\n    else if (typeof form.multiple === \\\"string\\\") {\\n      console.log(form.multiple)\\n    }\\n    // form.multiple is FormFile object\\n    else {\\n      Deno.writeFile(\\\"myMultipleFile.txt\\\", form.multiple.content!)\\n    }\\n  }\\n\\n  ctx.res.headers.set(\\\"content-type\\\", \\\"text/html\\\")\\n  ctx.send(`\\n  <h3>multiparser form update</h3>\\n  <form action=\\\"/upload\\\" enctype=\\\"multipart/form-data\\\" method=\\\"post\\\">\\n    <div>Text field title: <input type=\\\"text\\\" name=\\\"title\\\" /></div>\\n    <div>File: <input type=\\\"file\\\" name=\\\"multiple\\\" multiple/></div>\\n    <input type=\\\"submit\\\" value=\\\"Upload\\\" />\\n  </form>`)\\n})\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Form Data","route":"/docs/form-data"}}},"pageContext":{"id":"3873c9ce-923c-543b-b74f-224d0e98a505","slug":"/docs/form-data"}}}
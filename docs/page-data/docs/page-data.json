{"componentChunkName":"component---src-pages-docs-jsx","path":"/docs/","result":{"data":{"mdx":{"id":"4690a8ff-ac73-550c-ac8d-a8affdf8bcd1","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Error Handling\",\n  \"route\": \"/docs/error-handling\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"Error handling\"), mdx(\"p\", null, \"Deligenius has a default error handler \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"handleError\"), \"\\nin every \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Application\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Router\")), mdx(\"h4\", null, \"Error handling in middleware\"), mdx(\"p\", null, \"Use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"try...catch\"), \" to catch error is very common.\\nThe best pratice is to handle every error it yourself.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"app.use(async (ctx, next) => {\\n  try {\\n    methodThrowError()\\n  } catch (e) {\\n    console.log(e)\\n  }\\n})\\n\")), mdx(\"h4\", null, \"Throw \", mdx(\"inlineCode\", {\n    parentName: \"h4\"\n  }, \"HttpError\")), mdx(\"p\", null, \"You can also throw HttpError anywhere in a middleware:\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"throw new HttpError(message, statusCode)\"), \".\\nit will be handled by the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"app.handleError\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"router.handleError\"), \"\\nand it won't crash the server.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import {HttpError} from \\\"https://raw.githubusercontent.com/deligenius/deligenius/master/mod.ts\\\"\\n// you can throw HttpError in any middleware\\napp.use(async (ctx, next) => {\\n  throw new HttpError(\\\"no user found\\\", 404)\\n})\\n\")), mdx(\"h4\", null, \"Override \", mdx(\"inlineCode\", {\n    parentName: \"h4\"\n  }, \"errorHandler\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"app.errorHandler\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"router.errorHandler\"), \" can be override as:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"app.handleError = (err, ctx) => {\\n  if (err instanceof HttpError) {\\n    ctx.status(err.status).send(\\\"http error\\\")\\n  } else {\\n    ctx.send(\\\"some other error\\\")\\n  }\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Error Handling","route":"/docs/error-handling"}}},"pageContext":{}}}
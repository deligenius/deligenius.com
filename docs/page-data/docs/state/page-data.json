{"componentChunkName":"component---src-pages-docs-jsx","path":"/docs/state","result":{"data":{"mdx":{"id":"82c83b9d-3aa7-5315-bf55-3169b86686f0","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Use State\",\n  \"route\": \"/docs/state\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"State\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Deligenus provides a built-in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"state\"), \", which works very like the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"state\"), \" in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React\"), \", but in a application level. If you don't know state works, this post will work you throughout all the basic concepts you should know. \")), mdx(\"h4\", null, \"Use \", mdx(\"inlineCode\", {\n    parentName: \"h4\"\n  }, \"State\"), \" as a shared context in \", mdx(\"inlineCode\", {\n    parentName: \"h4\"\n  }, \"Application\")), mdx(\"p\", null, \"The following example shows how you can put \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Mysql\"), \" DB(database) instance as a shared context in every middleware. Any item in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"state\"), \" is supposed to be \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"read only\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import { Application } from \\\"https://deno.land/x/deligenius/mod.ts\\\";\\nimport { Client } from \\\"https://deno.land/x/mysql/mod.ts\\\";\\n\\nconst db = await new Client().connect({\\n  hostname: \\\"127.0.0.1\\\",\\n  username: \\\"root\\\",\\n  db: \\\"test\\\",\\n  password: \\\"password\\\",\\n});\\n\\ninterface State {\\n  db: Client;\\n}\\n\\n// inject State interface into Application\\nlet app = new Application<State>({ port: 8000 }).listen();\\n\\napp.setState({ db });\\n\\n// now db is available in state for every middlewares\\napp.use(async ({ req, res, state }, next) => {\\n  await state.db.execute(\\n    `INSERT INTO users(name) values(?)`,\\n    [\\\"test user\\\" + userCount],\\n  );\\n});\\n\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Use State","route":"/docs/state"}}},"pageContext":{"id":"82c83b9d-3aa7-5315-bf55-3169b86686f0","slug":"/docs/state"}}}